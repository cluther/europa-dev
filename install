#!/usr/bin/env python2.7
import sys
import os
from subprocess import call
import textwrap


PUBLIC_REPO = "git@github.com:zenoss/europa-dev.git"

# Need function to get a single keypress from the user
try:
    # Try Windows
    # noinspection PyUnresolvedReferences
    import msvcrt
    getch = msvcrt.getch
except ImportError:
    # Everything else
    # noinspection PyUnresolvedReferences
    import tty, termios
    def getch():
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(fd)
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch


# Define terminal color-printing functions
def _color_func(colorcode):
    return lambda s: '\033[{0}m{1}\033[0m'.format(colorcode, s)

grey = _color_func(30)
red = _color_func(31)
green = _color_func(32)
yellow = _color_func(33)
blue = _color_func(34)
magenta = _color_func(35)
cyan = _color_func(36)
white = _color_func(37)


# Simple func to get full path relative to PWD
here = lambda *x: os.path.abspath(os.path.join(os.path.curdir, *x))


def say(msg):
    """
    Output a message to the console.
    """
    wrapped = textwrap.wrap(msg)
    print blue("==>"), white(wrapped[0])
    for line in wrapped[1:]:
        print "   ", white(line)

def warn(msg):
    print
    print red("Warning") + ":", msg
    print "Are you sure you want to continue", blue("[")+"y/N"+blue("]"), "? ",
    ch = getch()
    print
    if ch not in "yY":
        abort("Installation aborted by user")


def shell(cmd):
    """
    Run a shell command, printing it first.
    """
    say(' '.join(cmd) if isinstance(cmd, (list, tuple)) else cmd)
    call(cmd, shell=True)


def abort(msg):
    print red("Error:"), msg
    sys.exit(0)


def wait():
    print "Press", blue("ENTER"), "to continue or any other key to abort"
    ch = getch()
    if ord(ch) not in (10, 13):
        abort("Installation aborted by user")


def git(cmd):
    shell((os.environ.get("GIT") or "git") + " " + cmd)


if __name__ == "__main__":
    EUROPA_ROOT = here('europa')
    say("This script will install a Zenoss Europa development environment into {0}".format(EUROPA_ROOT))
    wait()

    if os.path.isdir(here('europa', '.git')):
        warn("A europa dev environment already exists here! If you continue, it will be deleted.")
        shell("rm -rf {0}".format(EUROPA_ROOT))

    git("clone {0} {1}".format(PUBLIC_REPO, EUROPA_ROOT))

